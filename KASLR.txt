struct sock {
    ...
	void                       (*sk_state_change)(struct sock *); /*   672     8 */
	void                       (*sk_data_ready)(struct sock *); /*   680     8 */
	void                       (*sk_write_space)(struct sock *); /*   688     8 */
	void                       (*sk_error_report)(struct sock *); /*   696     8 */
	/* --- cacheline 11 boundary (704 bytes) --- */
	int                        (*sk_backlog_rcv)(struct sock *, struct sk_buff *); /*   704     8 */
	void                       (*sk_destruct)(struct sock *); /*   712     8 */
    ...
} \_\_attribute__((\_\_aligned__(8)));

Leaking any of the function pointers is sufficient to defeat KASLR. For a TCP socket, they will be set to the following functions:

\item \texttt{sk\_state\_change} $\leftrightarrow$ \texttt{<sock\_def\_wakeup>}
\item \texttt{sk\_data\_ready} $\leftrightarrow$ \texttt{<sock\_def\_readable>}
\item \texttt{sk\_write\_space} $\leftrightarrow$ \texttt{<sk\_stream\_write\_space>}
\item \texttt{sk\_error\_report} $\leftrightarrow$ \texttt{<sock\_def\_error\_report>}
\item \texttt{sk\_backlog\_rcv} $\leftrightarrow$ \texttt{<tcp\_v4\_do\_rcv>}
\item \texttt{sk\_destruct} $\leftrightarrow$ \texttt{<inet\_sock\_destruct>}
